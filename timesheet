#!/usr/bin/env python3
# Scan a timesheet file for datetime entries of the type: [2017-03-13 11:45AM]
# Calculate the time between entries and use the first sentence of the first line as an identifier.
# Coalesce and total the hours from all identifiers which do not start with '-' and print them at the end.

# TODO: JIRA integration?
import os
import sys
import time
from datetime import datetime, timedelta

def roundTime(dt=None, roundTo=60):
	"""Round a datetime object to any time laps in seconds
	dt : datetime.datetime object, default now.
	roundTo : Closest number of seconds to round to, default 1 minute.
	Author: Thierry Husson 2012 - Use it as you want but don't blame me.
	"""
	if dt == None : dt = datetime.now()
	seconds = (dt - dt.min).seconds
	rounding = (seconds+roundTo/2) // roundTo * roundTo
	return dt + timedelta(0,rounding-seconds,-dt.microsecond)

def analyze(timesheet_file):
	last_timestamp = None
	task_line = False
	entries = {}
	notes = str()
	
	for line in timesheet_file:
		try:
			# *Not* ISO 8601 for the time portion, but I hate 24h time for readability
			timestamp = datetime.strptime(line, '[%Y-%m-%d %I:%M%p]\n')
			task_line = True
			
			# Finish last entry
			if last_timestamp is not None:
				task_id = name
				# Iterate projects recursively
				project_entries = entries
				for token in task_id.split(':')[:-1]:
					# Match task id case insenstively
					if token.lower() not in (token.lower() for token in project_entries):
						project_entries[token] = {}
					project_entries = project_entries[token]
				
				entry = {}
				entry['name'] = name
				entry['notes'] = notes
				entry['start_time'] = last_timestamp
				entry['end_time'] = timestamp
				
				# Use first encounter of task as identifier, but match rest case insensitively
				found_existing_entry = False
				task_id = task_id.split(':')[-1].strip()
				for task_id_entry in project_entries:
					if task_id.lower() == task_id_entry.lower():
						project_entries[task_id_entry].append(entry)
						found_existing_entry = True
				if not found_existing_entry:
					project_entries[task_id] = []
					project_entries[task_id].append(entry)
			
			last_timestamp = timestamp
		except ValueError:
			notes += line.strip() + '\n'
			if task_line:
				name = line.strip().split(".")[0]
				# Use rest of line beside the task name for entry notes
				notes = ("".join(line.strip().split(".")[1:])).strip()
				if notes:
					notes += '\n'
				task_line = False
	return entries

def print_entries(entries, tabs, sort_entries, quiet):
	total_seconds = 0
	hours_print_width = 0
	first_entry = True
	
	entries_keys = entries
	if sort_entries and type(entries) is dict:
		entries_keys = list(entries.keys())
		entries_keys.sort(key=lambda entry: print_entries(entries[entry], 0, False, True), reverse=True)
	
	for entry in entries_keys:
		if 'start_time' not in entry:
			if entry.startswith('-'):
				continue
			
			project_seconds = print_entries(entries[entry], tabs + 1, sort_entries, True)
			
			# First valid entry, set the max print width (sorted, so it should be the longest)
			if first_entry:
				hours_print_width = len("%.2f" % (project_seconds/60/60))
				first_entry = False
			
			if not quiet:
				print('\t' * tabs + "%*.2fh: " % (hours_print_width, project_seconds/60/60) + entry)
			
			print_entries(entries[entry], tabs + 1, sort_entries, quiet)
			total_seconds += project_seconds
		else:
			entry_seconds = (entry['end_time']-entry['start_time']).total_seconds()
			total_seconds += entry_seconds
			if not quiet and args.v > 0:
				if args.v > 1:
					print('\t' * tabs + "%.2fh: " % (entry_seconds/60/60) + entry['start_time'].strftime("[%Y-%m-%d %I:%M%p]") + "-" + entry['end_time'].strftime("[%Y-%m-%d %I:%M%p]"))

				for line in entry['notes'].split('\n'):
					if line:
						if args.v > 1:
							print('\t' * (tabs + 1) + line)
						else:
							print('\t' * tabs + line)
			
	return total_seconds

def report_total(totals):
	total_hours = 0
	hours_print_width = 0
	first_entry = True
	for task, hours in sorted(totals.items(), key=lambda kv: (-kv[1], kv[0])):
		if task[:1] is not '-':
			# First valid entry, set the max print width (sorted, so it should be the longest)
			if first_entry:
				hours_print_width = len("%.2f" % hours)
				first_entry = False
			total_hours += hours
			print("%*.2fh: %s" % (hours_print_width, hours, task))

	print("\n%.2fh: Total" % total_hours)

def report(timesheet_file):
	if args.v > 2:
		print(timesheet_file.read())
		timesheet_file.seek(0)
		print("")
	entries = analyze(timesheet_file)
	total_seconds = print_entries(entries, 0, True, False)
	print("\n%.2fh: Total" % (total_seconds/60/60))
	return entries

def combine_entries(total_entries, entries):
	if type(entries) is dict and type(total_entries) is dict:
		for entry in entries:
			if entry.lower() not in (t_entry.lower() for t_entry in total_entries):
				total_entries[entry] = entries[entry]
			else:
				for t_entry in total_entries: 
					if t_entry.lower() == entry.lower():
						if type(total_entries[t_entry]) != type(entries[entry]):
							if type(total_entries[t_entry]) is list:
								# New entry treats previous task name as a project
								entries[entry][t_entry] = total_entries[t_entry]
								total_entries[t_entry] = entries[entry]
							else:
								# New entry treats previous project as a task name
								total_entries[t_entry][t_entry] = entries[entry]
						else:
							combine_entries(total_entries[t_entry], entries[entry])
	elif type(entries) is list and type(total_entries) is list:
		total_entries += entries

def session_report(file_path, dates):
	total_entries = {}
	for file_date in dates:
		file_path = os.path.dirname(file_path) + "/" + file_date.strftime('%Y-%m-%d')
		if os.path.isfile(file_path):
			print(file_date.strftime('Report for %a %Y-%m-%d:'))
			entries = report(open(file_path))
			print('-' * 80)
			if not total_entries:
				total_entries = entries
			else:
				combine_entries(total_entries, entries)
	
	print(file_date.strftime('Report for full session:'))
	total_seconds = print_entries(total_entries, 0, True, False)
	print("\n%.2fh: Total" % (total_seconds/60/60))

time_dir=os.path.expanduser(os.getenv('TIMESHEET_TIMEDIR', os.getcwd()))
today_timesheet_path = time.strftime(time_dir + "/%Y-%m-%d")

editor=os.getenv('TIMESHEET_EDITOR', 'vim')

interval=int(os.getenv('TIMESHEET_INTERVAL', '900'))

import argparse
parser = argparse.ArgumentParser(
	description='Generate reports for timesheet files. With no arguments, create new timesheet in $TIMESHEET_TIMEDIR for the current date with $TIMESHEET_EDITOR.',
	epilog='$TIMESHEET_TIMEDIR defaults for current directory when undefined. $TIMESHEET_EDITOR defaults to vim when undefined.')
parser.add_argument(
	"-r",
	help="Generate a time report for TIMESHEET. TIMESHEET defaults to current date in $TIMESHEET_TIMEDIR",
	nargs='?',
	metavar='TIMESHEET',
	type=argparse.FileType('r'),
	const=today_timesheet_path)
parser.add_argument(
	"-d",
	help="Generate reports for the last DAYS days, if they exist. Starts from TIMESHEET file if specified, uses current date if not. Defaults to 10 DAYS.",
	nargs='?',
	metavar='DAYS',
	type=int,
	const=10)
parser.add_argument(
	"-a",
	help="Generate reports for all time.",
	action="store_true")
parser.add_argument(
	"-v",
	help="Set the verbosity level (Accepts multiple levels). Displays notes, then time entries, then whole files.",
	default=0,
	action="count")
parser.add_argument(
	"-s",
	help="Generate a current timestamp rounded to the nearest $TIMESHEET_INTERVAL. Defaults to 900 seconds (15 minutes).",
	action="store_true")
args = parser.parse_args()

if args.r is not None:
	file_path = os.path.realpath(args.r.name)
else:
	file_path = today_timesheet_path

if args.a:
	dates = list()
	for filename in sorted(os.listdir(os.path.dirname(file_path))):
		try:
			file_date = datetime.strptime(filename, '%Y-%m-%d')
			dates.append(file_date)
		except ValueError:
			pass
	session_report(file_path, dates)
elif args.d is not None:
	dates = list()
	file_date = datetime.strptime(os.path.basename(file_path), '%Y-%m-%d')
	file_date = file_date - timedelta(days=args.d-1)
	while args.d > 0:
		dates.append(file_date)
		file_date = file_date + timedelta(days=1)
		args.d -= 1
	session_report(file_path, dates)
elif args.r is not None:
	day_totals = {}
	report(args.r)
elif args.s:
	print("[%s]" % (roundTime(roundTo=interval).strftime("%Y-%m-%d %I:%M%p")),end = '')
else:
	os.system(editor + " " + today_timesheet_path)
